@page "/form"
@using BlazorDemoTim.Shared
@using System.Text.Json;

@inject IJSRuntime JsRuntime

<h3>Form and Validation</h3>

<div>
	<span id="resultJson"></span>
</div>

<EditForm Model="@jobApplication" OnValidSubmit="@SubmitJobApplication">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<p>
		<label for="fullName">Name:</label>
		<InputText id="fullName" @bind-Value="jobApplication.Name" 
			@oninput="@(EventCallback.Factory.CreateBinder<string>(this, newValue => Task.FromResult(TypeCheck(newValue)), string.Empty))"    />
		<ValidationMessage For="@(() => jobApplication.Name)" />
	</p>

	<p>
		<label for="description">Description:</label>
		<InputTextArea id="description" @bind-Value="jobApplication.Description" />
	</p>

	<p>
		<label for="salary">Salary:</label>
		<InputNumber id="salary" @bind-Value="jobApplication.Salary" />
	</p>

	<p>
		<label for="doesOpenSource">Are you doing open source?</label>
		<InputCheckbox id="doesOpenSource" @bind-Value="jobApplication.DoesOpenSource" />
	</p>

	<p>
		<label for="availableDate">Availablity Date</label>
		<InputDate id="availableDate" @bind-Value="jobApplication.AvailableDate" />
	</p>

	<button type="Submit">Submit</button>
</EditForm>



@code {
	private JobApplication jobApplication = new JobApplication();


	private async Task TypeCheck(string currentValue)
	{
		await JsRuntime.InvokeVoidAsync("setElementTextById", "resultJson", currentValue);
		//		await JsRuntime.InvokeVoidAsync("showAlert", JsonSerializer.Serialize(jobApplication));
	}


	private async Task SubmitJobApplication()
	{
		await JsRuntime.InvokeVoidAsync("setElementTextById", "resultJson", JsonSerializer.Serialize(jobApplication));
		//		await JsRuntime.InvokeVoidAsync("showAlert", JsonSerializer.Serialize(jobApplication));
	}
}
