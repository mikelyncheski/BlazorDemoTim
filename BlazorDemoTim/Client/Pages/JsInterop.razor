@page "/jsinterop"
@inject IJSRuntime JsRuntime

<h1>JS Interop</h1>

<h3>Create Alert</h3>
<button class="btn btn-success" @onclick="ShowAlert">Show Alert</button>
<br />

<h3>Ask me a question</h3>
<input @bind="questionText" />
<button class="btn btn-warning" @onclick="AskQuestion">Ask Question</button>
<div>The answer was: <span id="answerSpan"></span></div>

<h3>Please focus</h3>
<input @ref="inputToFocus" />
<button class="btn btn-danger" @onclick="Focus">Focus!</button>


@code {
	private string questionText = string.Empty;
	ElementReference inputToFocus;   // Very cool and similar to react


	protected override void OnAfterRender(bool firstRender)
	{
		//if (firstRender)
		//	ShowAlert();

		// If you try to do JS stuff in the OnInitialize on the web server version of blazor, it will be 
		// too early.  Use this event instead.
	}


	private async Task ShowAlert()
	{
		await JsRuntime.InvokeVoidAsync("createAlert");
	}


	private async Task AskQuestion()
	{
		var response = await JsRuntime.InvokeAsync<string>("createPrompt", questionText);
		await JsRuntime.InvokeVoidAsync("setElementTextById", "answerSpan", response);
	}


	private async Task Focus()
	{
		await JsRuntime.InvokeVoidAsync("focusOnElement", inputToFocus);
	}


}
